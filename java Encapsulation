/*

Encapsulation in Java
Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which 
is mixed of several medicines.

encapsulation in java
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can 
use setter and getter methods to set and get the data in it.

The Java Bean class is the example of a fully encapsulated class.

Advantage of Encapsulation in Java
By providing only a setter or getter method, you can make the class read-only or write-only. In other words, 
you can skip the getter or setter methods.

It provides you the control over the data. Suppose you want to set the value of id which should be greater than 
100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers 
in the setter methods.

It is a way to achieve data hiding in Java because other class will not be able to access the data through
the private data members.

The encapsulate class is easy to test. So, it is better for unit testing.

The standard IDE's are providing the facility to generate the getters and setters. So, it is easy and fast to
create an encapsulated class in Java.*/





public class Encapsulation{
private int ssn;
private String empName;
private int empAge;
public int getEmpSSN()
{
return ssn;
}
public String getEmpName()
{
 return empName;
 }
 public int getEmpAge()
{
return empAge;
}
public int setEmpage( int newValue)
{
empAge=newValue;
}
public void setEmpname(String newValue){
empName=newValue;
}
public void setEmpSSN(int newValue){
ssn=newValue;
}}
package encapsulation;
public class EncapTest{
public static void main(String args[]){
Encapsulation obj=new Encapsulation();
obj.setEmpname("Fayaz");
obj.setEmpage(25);
obj.setEmpSSN(12223);
System.out.println("Employee Name"+obj.getEmpName());
System.out.println("Employee SSN"+obj.setEmpSSN());
System.out.println("Employee Name"+obj.getEmpAge());
}}










 
 
 
 
 
